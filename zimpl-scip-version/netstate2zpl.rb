#
# this script generates simulator_static_data.zpl from net- and state-file generated by create_netstate script
#

require 'rexml/document'
require 'yaml'

include REXML

Barg2Bar = 1.01325

#Getting from-node and to-node alias of connection elements
def aliasForFromTo(from_id,to_id)
  from = to = nil
  $netdoc.elements.each('//nodes/*') { |node|
    if node.attributes["id"] == from_id
      from = node.attributes["alias"]
    elsif node.attributes["id"] == to_id
      to = node.attributes["alias"]
    end
  }
  if !from.nil? && !to.nil?
    id_from, id_to =  from,to
    from = to = nil
  end
  return id_from, id_to
end

#Getting connection elements
def connectionsElement(from,to,con_type) 
  from_, to_ =  aliasForFromTo(from,to)  
  con_type +=  "<\"#{from_}\", \"#{to_}\">,\n"
  return con_type
end

#Setting pipe parameters
def setPipeParams(dict, param)
  dict.each{ |key, value| 
    a,b = key.split('^')
    param += "<\"#{a}\",\"#{b}\"> #{value},\n"
  }
  param
end

#Setting Pressure Limites
def setPressureLimits(dict, param)
  dict.each{ |key, value| 
    param += "<\"#{key}\"> #{value},\n"  
  }
  param
end

#Appending string to make a set, params in Zimpl
formatter_set = ->(str) { str.sub(/(.*),/m,'\1')+"};\n\n" }
formatter_params = ->(str) {str.sub(/(.*),/m,'\1;') << "\n"}

dir = ARGV[0]
Dir.chdir("#{dir}") #Dir.chdir(ARGV[2])
netFile = File.open("netstate/net_sim.xml","r")
stateFile = File.open("netstate/state_sim.xml","r")
simulator_data_zpl = File.open("simulator_static_data.zpl","w+")
compressorYML = YAML.load_file("compressors.yml")

#net-xml and state-xml
$netdoc = Document.new(File.open(netFile))
#$statedoc = Document.new(File.open(stateFile))

simulatordata = ""

#Nodes: Boundary nodes (Entry nodes and exit nodes) and Inner nodes(innodes)
set_E = "# Entrys\nset E := {\n"
set_X = "# Exits\nset X := {\n"
set_N = "# Innodes\nset N := {\n"
nh = {} #Hash for node heights
lower_p = {} #Hash for lower pressure limits 
upper_p = {} #Hash for higher pressure limits 

$netdoc.elements.each('//nodes/*') { |node|
  al = node.attributes["alias"]
  nh[al] = node.elements["height"].attributes["value"]
  lower_p[al] = node.elements["pressureLimits"].attributes["lower"].to_f + Barg2Bar
  upper_p[al] = node.elements["pressureLimits"].attributes["upper"].to_f + Barg2Bar
  
  if node.name == "innode"
    set_N += "<\"#{al}\">,\n"
  elsif node.attributes['behaviour'] == "entry"
    set_E += "<\"#{al}\">,\n"
  else  #node.attributes['behaviour'] == "exit"
    set_X += "<\"#{al}\">,\n"
  end      
}
simulatordata << formatter_set.(set_E) << formatter_set.(set_X) << formatter_set.(set_N)

#Connections (Pipes, special pipes, valves, resistors, check valves and compressors)
set_P = "# Pipes\nset P := {\n"
set_VA = "# Valves\nset VA := {\n"
set_RE = "# Resistors\nset RE := {\n"
set_FT = "set FT := {\n"
set_CS = "# Compressors\nset CS := {\n"
set_SP = "# Special set to track entry nominations\nset S := {\n"

lp = {} #Hash for length of pipes
dp = {} #Hash for pipe diameter
roughness= {} #Hash for Integral pipe roughness
dr = {} #Hash for resistor diameter

$netdoc.elements.each('//connections/*') { |con|
  if con.name == "pipe"
    al = con.attributes["alias"]
    s,d = al.split('^')
    lp[al] = ((con.elements["length"].attributes["value"]).to_f)*1000 # km to m
    dp[al] = ((con.elements["diameter"].attributes["value"]).to_f)*10**-3 # mm to m
    roughness[al] = ((con.elements["roughness"].attributes["value"]).to_f)*10**-3 # mm to m
    set_P += "<\"#{s}\", \"#{d}\">,\n"
    set_SP += "<\"#{s}\", \"#{d}\">,\n" if al.match(/[\S]*_aux1\^/) 
  else
    from_id = con.attributes['from']
    to_id = con.attributes['to']
    case con.name    
      when "valve"
        set_VA = connectionsElement(from_id,to_id,set_VA)
      when "resistor"
        from,to = aliasForFromTo(from_id,to_id)
        dr["#{from}^#{to}"] = ((con.elements["diameter"].attributes["value"]).to_f)*10**-3 # mm to m
        set_RE = connectionsElement(from_id, to_id, set_RE)
      when "checkValve"
        set_FT = connectionsElement(from_id, to_id, set_FT)
      when "compressorStation"
        set_CS = connectionsElement(from_id,to_id,set_CS)
    end
  end
}

simulatordata << formatter_set.(set_P) << formatter_set.(set_VA) << formatter_set.(set_RE) << formatter_set.(set_FT) << formatter_set.(set_CS)
simulatordata += formatter_set.(set_SP)

simulatordata << "# Connections\nset CN := P union VA union RE union FT union CS;\n\n" 
simulatordata << "# Nodes\nset NO := E union X union N;\n\n"
simulatordata << "# Boundary nodes\nset BN := E union X;\n\n"

#Compressor Paramaters
if compressorYML.nil?()
  simulatordata << "#########################################\n#\n# Compressor modelling\n#\n"
  simulatordata += "# value of L_max at 0 in 1\nparam L_max_pi[CS] := <> 0;\n"
  simulatordata += "# value of L_min at 0 in 1\nparam L_min_pi[CS] := <> 0;\n"
  simulatordata += "# argument phi with P_min(phi) = 0 in 1\nparam L_min_phi[CS] := <> 0;\n"
  simulatordata += "# p_i_min in bar\nparam p_i_min[CS] := <> 0;\n"
  simulatordata += "# p_i_max in bar\nparam p_i_max[CS] := <> 0;\n"
  simulatordata += "# phi_min in m続/s\nparam phi_min[CS] := <> 0;\n"
  simulatordata += "# phi_max in m続/s\nparam phi_max[CS] := <> 0;\n"
  simulatordata += "# pi_1\nparam pi_1[CS] := <> 0;\n"
  simulatordata += "# pi_2\nparam pi_2[CS] := <> 0;\n"
  simulatordata += "# eta\nparam eta[CS] := <> 0;\n\n"
else
  simulatordata << "#########################################\n#\n# Compressor modelling\n#\n"
  param_L_max_pi = "# value of L_max at 0 in 1\nparam L_max_pi[CS] :=\n"
  param_L_min_pi = "# value of L_min at 0 in 1\nparam L_min_pi[CS] :=\n"
  param_L_min_phi = "# argument phi with P_min(phi) = 0 in 1\nparam L_min_phi[CS] :=\n"
  param_p_i_min = "# p_i_min in bar\nparam p_i_min[CS] :=\n"
  param_p_i_max ="# p_i_max in bar\nparam p_i_max[CS] :=\n"
  param_phi_min = "# phi_min in m続/s\nparam phi_min[CS] :=\n"
  param_phi_max = "# phi_max in m続/s\nparam phi_max[CS] :=\n"
  param_pi_1 = "# pi_1\nparam pi_1[CS] :=\n"
  param_pi_2 = "# pi_2\nparam pi_2[CS] :=\n"
  param_eta = "# eta\nparam eta[CS] :=\n"

  compressorYML.each{|al,params|
      cs_from,cs_to = al.split('^')
      index = "<\"#{cs_from}\",\"#{cs_to}\">"
      if params.is_a? Hash
        params.each{|name,value|
          param_name = case name 
            when "L_max_pi" 
              param_L_max_pi 
            when  "L_min_pi"
              param_L_min_pi 
            when "L_min_phi"
              param_L_min_phi 
            when "p_i_min"
              param_p_i_min 
            when "p_i_max"
              param_p_i_max 
            when "phi_max"
              param_phi_max 
            when "phi_min"
              param_phi_min 
            when "pi_1"
              param_pi_1 
            when "pi_2"
              param_pi_2 
            when "eta"
              param_eta
            end
            param_name << "#{index} #{value},\n"
        }
      end
  }
  simulatordata << formatter_params.(param_L_max_pi) << formatter_params.(param_L_min_pi) << formatter_params.(param_L_min_phi)              
  simulatordata << formatter_params.(param_p_i_min) << formatter_params.(param_p_i_max) << formatter_params.(param_phi_max)
  simulatordata << formatter_params.(param_phi_min) << formatter_params.(param_pi_1) << formatter_params.(param_pi_2) << formatter_params.(param_eta)
  simulatordata << "#########################################\n\n"                
end

#Parameters
param_LP = "# Pipe lenghts in m\nparam L[P] :=\n" 
param_LP = formatter_params.(setPipeParams(lp,param_LP))

param_DP = "# Pipe diameters in m\nparam D[P union RE] :=\n"
dp = dp.merge(dr)
param_DP = formatter_params.(setPipeParams(dp, param_DP))

param_PipeRoughness = "# Integral pipe roughness in m\nparam k[P] :=\n"
param_PipeRoughness = formatter_params.(setPipeParams(roughness, param_PipeRoughness))

param_Nh = "# Node heights above sea level in m\nparam h[NO] :=\n"
nh.each{ |node, height|
  param_Nh += "<\"#{node}\"> #{height},\n"  
  }
param_Nh  = formatter_params.(param_Nh)

param_entry_flow_bounds = "# entry flow bounds\nparam entry_flow_bound[E] := \n"
param_EP = "# pressures\nparam pressure[E] :=\n"

$netdoc.elements.each("//boundaryNode") do |entry|
  al = entry.attributes["alias"]
  if entry.attributes["behaviour"] == "entry"
    inflow = entry.elements["inflowLimits"].attributes["upper"]
    param_entry_flow_bounds += "<\"#{al}\"> #{inflow},\n"
    pressure = entry.elements["pressureLimits"].attributes["upper"].to_f + Barg2Bar
    param_EP += "<\"#{al}\"> #{pressure},\n"
  end  
end
param_entry_flow_bounds = formatter_params.(param_entry_flow_bounds)
param_EP = formatter_params.(param_EP)

simulatordata << param_LP << param_DP << param_PipeRoughness << param_Nh << param_entry_flow_bounds << param_EP

paramPressureLower = "# Lower Pressure Limits for all nodes\nparam pressureLimitsLower[NO] := \n"
paramPressureLower = formatter_params.(setPressureLimits(lower_p, paramPressureLower))

paramPressureUpper = "# Upper Pressure Limits for all nodes\nparam pressureLimitsUpper[NO] := \n"
paramPressureUpper = formatter_params.(setPressureLimits(upper_p, paramPressureUpper))

simulatordata << paramPressureLower << paramPressureUpper

File.write(simulator_data_zpl, simulatordata)
